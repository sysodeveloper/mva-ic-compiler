package IC.Parser;

import IC.*;
import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
import java.util.*;

parser code  {:
    /** Causes the parser to print every token it reads.
     * This is useful for debugging.
     */
    public boolean printTokens;
    
    private Lexer lexer;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }
    
    public int getLine() {
        return lexer.getLineNumber();
    }
    
    public void syntax_error(Symbol s) {
    return;
        //Token tok = (Token) s;
        /*
        System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
        */
    }
    
    public void unrecovered_syntax_error(Symbol s) throws SyntaxError{
    	Token tok = (Token) s;
    	throw new SyntaxError(tok,tok.getLineNumber());
    }
:}

// This is just for debugging
scan with {:
    Token t = lexer.next_token();
    if (printTokens)
        System.out.println(t.getLineNumber() + ":" + t);
    return t; 
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

non terminal Program Program;
non terminal ClassIC, ClassICEx, ClassContent,FieldOrMethod,Field,FieldList,VirtualMethod,StaticMethod,MethodType;
non terminal Formals,StatmentOrEmpty,Type,TypeList, Statement,InitVariable,Expr,ExprOrEmpty;
non terminal Call,ElseStatement,StaticCall,VirtualCall,Arguments,ArgumentsList;
non terminal ExprDotOrEmpty, LogicBinop, Binop, Unop, Literal, Location;
non terminal MethodPrefix,VirtualCallPrefix;
non terminal StatementStar;
non terminal A,B,C,D,F,G,H,I,J;

terminal         ASSIGN;
terminal INTEGER;
terminal LP, RP , LB , RB , LCBR , RCBR , BOOLEAN , BREAK , COMMA  , EQUAL , EXTENDS , ELSE , FALSE , GT , GTE , ID , IF , INT  , LAND , CLASS , LENGTH , NEW , LNEG , LOR , LT , LTE , MINUS , MOD , MULTIPLY , NEQUAL , NULL , PLUS , RETURN , SEMI , STATIC , STRING , QUOTE , THIS , TRUE , VOID , WHILE , CLASS_ID , PLUSPLUS , MINUSMINUS , PLUSEQUAL , MINUSEQUAL , MULTIPLYEQUAL, CONTINUE, DIVIDE, DIVIDEEQUAL, DOT;
terminal UNOP;

//////////////////////////
// Precedence declarations

precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GT,GTE,LT,LTE;
precedence left PLUS,MINUS;
precedence left MULTIPLY,DIVIDE,MOD;
precedence left DOT,LB,LP,RB,RP;
precedence right UNOP;
precedence left ELSE;
//////////////
// The grammar



Program ::= ClassIC:icClass Program:program 
					{:	
						Program p = new Program(new ArrayList<ICClass>());
						p = (Program)program;
						List<ICClass> classes = p.getClasses();
						classes.add((ICClass)icClass);
						RESULT = new Program(classes);
					:}|
					
ClassICEx:icClass Program:program
					{:	
						Program p = new Program(new ArrayList<ICClass>());
						p = (Program)program;
						List<ICClass> classes = p.getClasses();
						classes.add((ICClass)icClass);
						RESULT = new Program(classes);
					:}|
					
             	    {: RESULT = new Program(new ArrayList<ICClass>()); :} ;

ClassIC ::= CLASS CLASS_ID:className ClassContent:content
					{:		
							Object[] classContent = new Object[2];
							classContent = (Object[])content;
							ArrayList<Field> fields = (ArrayList<Field>)classContent[0];
							ArrayList<Method> methods = (ArrayList<Method>)classContent[1];
							RESULT = new ICClass(parser.getLine(), className.toString(), fields, methods);
					:}
;

ClassICEx ::= CLASS CLASS_ID:derivedClass EXTENDS CLASS_ID:baseClass ClassContent:content 
					{:
							Object[] classContent = new Object[2];
							classContent = (Object[])content;
							ArrayList<Field> fields = (ArrayList<Field>)classContent[0];
							ArrayList<Method> methods = (ArrayList<Method>)classContent[1];
							RESULT = new ICClass(parser.getLine(), derivedClass.toString(),baseClass.toString(), fields, methods);
					:}
;

ClassContent ::= LCBR FieldOrMethod:fom RCBR {: RESULT = fom; :};

FieldOrMethod ::= Field:field FieldOrMethod:fom 		 {: Object[] arr = new Object[2];
  				  											arr = (Object[])fom;
  				  											((ArrayList<Field>)arr[0]).addAll((ArrayList<Field>)field);
 				  											RESULT = arr; 
 				  										 :}|

 				  StaticMethod:method FieldOrMethod:fom  {: 
 				  											Object[] arr = new Object[2];
  				  											arr = (Object[])fom;		
  				  											((ArrayList<Method>)arr[1]).add((Method)method);
 				  											RESULT = arr;  
 				  										 :}|
 				  
  				  VirtualMethod:method FieldOrMethod:fom {: 
  				  											Object[] arr = new Object[2];
  				  											arr = (Object[])fom;		
  				  											((ArrayList<Method>)arr[1]).add((Method)method);
 				  											RESULT = arr; 
 				  										 :}|
  				  
  				 										 {: 
  				 										 	ArrayList<Field>  fields  = new ArrayList<Field >();
  				 										 	ArrayList<Method> methods = new ArrayList<Method>();
  				 										 	Object[] fom = new Object[2];
  				 										 	fom[0] = fields; fom[1] = methods;  				 										 	
  				 										 	RESULT = fom; 
  				 										 :} ;


Field ::= Type:t ID:i FieldList:flst SEMI 
		{:	 
			ArrayList<Field> lstFields = (ArrayList<Field>)flst;
			ArrayList<Field> TypedFields = new ArrayList<Field>();
			for(Field f : lstFields){
				TypedFields.add(new Field((Type)(((Type)t).clone()),f.getName()));				
			}
				
			TypedFields.add( new Field((Type)t, i.toString()) );  
			RESULT = TypedFields;	:};


FieldList ::= COMMA ID:i FieldList:flst
			 {: ArrayList<Field> lstFields = (ArrayList<Field>)flst;
			 	lstFields.add(new Field(new PrimitiveType(parser.getLine(), DataTypes.INT) ,i.toString()) );
			 	RESULT = lstFields; :}|
			 {: RESULT = new ArrayList<Field>();  :} ;
			 

 


Type::= INT 	 	 {: RESULT = new PrimitiveType(parser.getLine(), DataTypes.INT); :} | 
		BOOLEAN		 {: RESULT = new PrimitiveType(parser.getLine(), DataTypes.BOOLEAN); :} | 
		STRING  	 {: RESULT = new PrimitiveType(parser.getLine(), DataTypes.STRING); :} | 
		CLASS_ID:c   {: RESULT = new UserType(parser.getLine(),c.toString()); :} | 
		Type:t LB RB {: ((Type)t).incrementDimension(); RESULT = t; :};


MethodPrefix ::= VOID ID:id LP 
					{: 
							Object methodPrefix[] = new Object[2];
							methodPrefix[0]=new PrimitiveType(parser.getLine(),DataTypes.VOID); methodPrefix[1]=id;
							RESULT = methodPrefix;
					:} |
				 Type:t ID:id LP 
				 	{:
				 			Object methodPrefix[] = new Object[2];
							methodPrefix[0]=t; methodPrefix[1]=id;
							RESULT = methodPrefix;
				 	:};


VirtualMethod ::= MethodPrefix:mPrefix Formals:formals RP LCBR StatementStar:statements RCBR 
					{:
						Object[] prefix = new Object[2];
						prefix = (Object[])mPrefix;
						RESULT = new VirtualMethod((Type)prefix[0], prefix[1].toString(), (List<Formal>) formals, (List<Statement>) statements);	
					:};


StaticMethod ::= STATIC MethodPrefix:mPrefix Formals:formals RP LCBR StatementStar:statements RCBR
					{:
						Object[] prefix = new Object[2];
						prefix = (Object[])mPrefix;
						RESULT = new StaticMethod((Type)prefix[0], prefix[1].toString(), (List<Formal>) formals, (List<Statement>) statements);	
					:};

Formals::= Type:t ID:i TypeList:lst 
			{:	ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
				lstFormals.add(new Formal((Type)t,i.toString()));
				RESULT = lstFormals;:} |
			{:  RESULT = new ArrayList<Formal>(); :}; 


TypeList::=  COMMA Type:t ID:i TypeList:lst 
			{: 	ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
				lstFormals.add(new Formal((Type)t,i.toString()));
				RESULT = lstFormals; :} |
			{:  RESULT = new ArrayList<Formal>(); :} ;





Statement ::=   Location:l ASSIGN Expr:e SEMI {: RESULT = new  Assignment((Location)l, (Expression)e); :}| 
				
				Call:call SEMI {: RESULT = new  CallStatement((Call)call);:}| 
				
				RETURN ExprOrEmpty:e SEMI {: RESULT = (e==null)? new Return(parser.getLine()): new Return(parser.getLine(),(Expression)e); 	:}|
				
				IF LP Expr:condition RP Statement:ifStm ELSE Statement:elseStm 
					{:
						List<Statement> ifStmList  = new ArrayList<Statement>();
						List<Statement> elseStmList  = new ArrayList<Statement>();
						
						if(!(ifStm instanceof List<?>)) ifStmList.add((Statement)ifStm); else ifStmList = (ArrayList<Statement>)ifStm;
						if(!(elseStm  instanceof List<?>)) elseStmList.add((Statement)elseStm); else elseStmList = (ArrayList<Statement>)elseStm;					 	
						RESULT = new If((Expression)condition, new StatementsBlock(parser.getLine(), (List<Statement>)ifStmList), new StatementsBlock(parser.getLine(), (List<Statement>)elseStmList));
					
					:}|
				
				IF LP Expr:condition RP Statement:ifStm
					 {:
					 	List<Statement> stmList  = new ArrayList<Statement>();
					  	if( !(ifStm instanceof List<?> )) stmList.add((Statement)ifStm); else stmList = (ArrayList<Statement>)ifStm;
					 	RESULT = new If((Expression)condition, new StatementsBlock(parser.getLine(), (List<Statement>)stmList));
					 :} |
				
				WHILE LP Expr:condition RP Statement:stm 
					 {: 
						List<Statement> stmList  = new ArrayList<Statement>();
						if(!(stm instanceof List<?>)) stmList.add((Statement)stm); else stmList = (ArrayList<Statement>)stm;
						RESULT = new While((Expression)condition, new StatementsBlock(parser.getLine(), (List<Statement>)stmList)); 
					 :}|	    
			    
			    BREAK SEMI {:RESULT = new Break(parser.getLine());:}|
			    
			    CONTINUE SEMI {:RESULT = new Continue(parser.getLine());:}|
			    
			    LCBR StatementStar:stmList RCBR {: RESULT = stmList; :}|   
			    
			    Type:t ID:id InitVariable:e SEMI {: if(e!=null) RESULT = new LocalVariable((Type)t, id.toString() , (Expression)e); else RESULT = new LocalVariable((Type)t, id.toString() );  :}
			    ;

StatementStar ::=  Statement:stm StatementStar:stmList
							   {:
							   		((ArrayList<Statement>)stmList).add((Statement)stm);
							   		RESULT = stmList;	 
							   :}|
							   {:RESULT = new ArrayList<Statement>();:} ;

InitVariable ::= ASSIGN Expr:e {: RESULT = e; :}|{:RESULT = null;:}  ;

ExprOrEmpty ::= Expr:e{: RESULT = e; :}|{:RESULT = null;:} ;

Location ::= ID:id {: RESULT = new VariableLocation(parser.getLine(), id.toString()); :}|
 			 Expr:e DOT ID:id {: RESULT = new VariableLocation(parser.getLine(),(Expression)e, id.toString()); :}|
  			 Expr:array LB Expr:index RB {: RESULT = new ArrayLocation((Expression) array, (Expression) index); :} ;

Call ::= StaticCall:sc{:RESULT = sc;:} | VirtualCall:vc{:RESULT = vc;:};

StaticCall ::= CLASS_ID:class_id DOT ID:id LP Arguments:argsList RP
				{: 
				RESULT = new StaticCall(parser.getLine(), class_id.toString(), id.toString(),(List<Expression>) argsList); :};

VirtualCall ::= VirtualCallPrefix:callPrefix Arguments:argsList RP 
					 {: 
					 	Object prefix[] = new Object[2];
					 	prefix = (Object[])callPrefix;
					 	RESULT = new VirtualCall(parser.getLine(),(Expression)prefix[0],prefix[1].toString(),(List<Expression>)argsList);
					 
					 :} | 
 				ID:id LP Arguments:argsList RP {: RESULT = new VirtualCall(parser.getLine(),id.toString(),(List<Expression>)argsList); :};

VirtualCallPrefix ::= Expr:e DOT ID:id LP {:
											 Object callPrefix[] = new Object[2];
											 callPrefix[0]=e;  callPrefix[1]=id; 
											 RESULT = callPrefix;
									     :};

Arguments ::= Expr:argument ArgumentsList:arglist 
				{: ((ArrayList<Expression>)arglist).add((Expression)argument); RESULT = arglist;  :}|
				{: RESULT = new ArrayList<Expression>(); :} ;

ArgumentsList ::= COMMA Expr:argument ArgumentsList:arglist 
				{:  ((ArrayList<Expression>)arglist).add((Expression)argument); RESULT = arglist; :}|
			    {:  RESULT = new ArrayList<Expression>(); :}; 

Binop ::= PLUS      {: RESULT = BinaryOps.PLUS;  :} |
 		  MINUS     {: RESULT = BinaryOps.MINUS;  :}  |
  		  MULTIPLY  {: RESULT = BinaryOps.MULTIPLY;  :}  |
   		  DIVIDE    {: RESULT = BinaryOps.DIVIDE;  :}  | 
   		  MOD       {: RESULT = BinaryOps.MOD;  :}  |
		  LAND  	{: RESULT = BinaryOps.LAND;  :}  |
		  LOR  		{: RESULT = BinaryOps.LOR;  :}  |
		  GT  		{: RESULT = BinaryOps.GT;  :}  |
       	  GTE  		{: RESULT = BinaryOps.GTE;  :}  |
          LT  		{: RESULT = BinaryOps.LT;  :}  |
          LTE  		{: RESULT = BinaryOps.LTE;  :}  |
          EQUAL  	{: RESULT = BinaryOps.EQUAL;  :}  |
          NEQUAL    {: RESULT = BinaryOps.NEQUAL;  :} ;
          
        

Unop ::= MINUS {: RESULT = UnaryOps.UMINUS;  :} | 
		 LNEG  {: RESULT = UnaryOps.LNEG;  :};

Literal ::= INTEGER:l
{: RESULT = new Literal(parser.getLine(),LiteralTypes.INTEGER,l); :} | 
QUOTE:l 
{: RESULT = new Literal(parser.getLine(),LiteralTypes.STRING, l); :} | 
TRUE:l
{: RESULT = new Literal(parser.getLine(),LiteralTypes.TRUE); :} | 
FALSE:l 
{: RESULT = new Literal(parser.getLine(),LiteralTypes.FALSE); :} | 
NULL:l
{: RESULT = new Literal(parser.getLine(),LiteralTypes.NULL); :};

Expr ::= Location:l{: RESULT = l ;:}|
		
		Call:call {: RESULT = call; :}|
		
		THIS {: RESULT = new This(parser.getLine()); :} |
		
		LP Expr:e RP {: RESULT = new ExpressionBlock((Expression)e); :}| 
		
		NEW CLASS_ID:cid LP RP {: RESULT = new NewClass(parser.getLine(), cid.toString()); :}|
		
		NEW Type:t LB Expr:e RB {: RESULT = new  NewArray((Type)t,(Expression)e);  :}|
		
		Expr:e DOT LENGTH {: RESULT = new Length((Expression)e); :}|
		
		Literal:lt {: RESULT = lt; :}|
		
		MINUS:um Expr:e {: RESULT = new LogicalUnaryOp(UnaryOps.UMINUS,(Expression)e); :} %prec UNOP  |
		
		LNEG:not Expr:e {: RESULT = new LogicalUnaryOp(UnaryOps.LNEG,(Expression)e); :} %prec UNOP |

		Expr:e1 PLUS Expr:e2 {: RESULT = new MathBinaryOp((Expression)e1,BinaryOps.PLUS,(Expression)e2); :} |
		Expr:e1 MINUS Expr:e2 {: RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MINUS,(Expression)e2); :} |
		Expr:e1 MULTIPLY Expr:e2 {: RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MULTIPLY,(Expression)e2); :} |
		Expr:e1 DIVIDE Expr:e2 {: RESULT = new MathBinaryOp((Expression)e1,BinaryOps.DIVIDE,(Expression)e2); :} |
		Expr:e1 MOD Expr:e2 {: RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MOD,(Expression)e2); :} |
		Expr:e1 LAND Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LAND,(Expression)e2); :} |
		Expr:e1 LOR Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LOR,(Expression)e2); :} |
		Expr:e1 GT Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.GT,(Expression)e2); :} |
		Expr:e1 GTE Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.GTE,(Expression)e2); :} |
		Expr:e1 LT Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LT,(Expression)e2); :} |
		Expr:e1 LTE Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LTE,(Expression)e2); :} |
		Expr:e1 EQUAL Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.EQUAL,(Expression)e2); :} |
		Expr:e1 NEQUAL Expr:e2 {: RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.NEQUAL,(Expression)e2); :} ;
			