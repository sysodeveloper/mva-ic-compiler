package IC.Parser;
import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
import java.util.*;

parser code  {:
	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
    public void syntax_error(Symbol s) {
    return;
        //Token tok = (Token) s;
        /*
        System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
        */
    }
    
    public void unrecovered_syntax_error(Symbol s) throws SyntaxError{
    	Token tok = (Token) s;
    	throw new SyntaxError(tok,tok.getLineNumber());
    }

	
	
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLineNumber() + ":" + t);
	return t; 
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

non terminal libic, libmethod, type, formals, typelist, userclass;
terminal         ASSIGN;
terminal INTEGER;
terminal LP, RP , LB , RB , LCBR , RCBR , BOOLEAN , BREAK , COMMA  , EQUAL , EXTENDS , ELSE , FALSE , GT , GTE , ID , IF , INT  , LAND , CLASS , LENGTH , NEW , LNEG , LOR , LT , LTE , MINUS , MOD , MULTIPLY , NEQUAL , NULL , PLUS , RETURN , SEMI , STATIC , STRING , QUOTE , THIS , TRUE , VOID , WHILE , CLASS_ID , PLUSPLUS , MINUSMINUS , PLUSEQUAL , MINUSEQUAL , MULTIPLYEQUAL, CONTINUE, DIVIDE, DIVIDEEQUAL, DOT;
terminal UNOP;

//////////////////////////
// Precedence declarations

//////////////
// The grammar
libic ::= CLASS CLASS_ID:id LCBR libmethod:lstMethods RCBR
{:
	if(id.toString().compareTo("Library") != 0){ parser.syntax_error((Symbol) id); };	
	RESULT = new ICClass(parser.getLine(), id.toString(),(List<Field>)new ArrayList<Field>(),(List<Method>) lstMethods);
:};
libmethod ::= STATIC type:t ID:i LP formals:lstFormals RP SEMI libmethod:lstMethods
{:  ArrayList<LibraryMethod> methods = (ArrayList<LibraryMethod>)lstMethods;
	LibraryMethod sm = new LibraryMethod((Type)t,i.toString(), (ArrayList<Formal>)lstFormals); 
	methods.add(sm);
	RESULT = methods; :} | 
STATIC VOID ID:i LP formals:lstFormals RP SEMI libmethod:lstMethods 
{:  ArrayList<LibraryMethod> methods = (ArrayList<LibraryMethod>)lstMethods;
	methods.add(new LibraryMethod(new PrimitiveType(parser.getLine(),DataTypes.VOID), i.toString(), (ArrayList<Formal>)lstFormals));
	RESULT = methods; :}
|  {: RESULT = new ArrayList<LibraryMethod>(); :};
type::= INT 
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.INT); :} | 
BOOLEAN
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.BOOLEAN); :} | 
STRING 
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.STRING); :} | 
CLASS_ID:c
{: RESULT = new UserType(parser.getLine(),c.toString()); :} | 
type:t LB RB
{:((Type)t).incrementDimension(); RESULT = t; :};
formals::= type:t ID:i typelist:lst 
{:	ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
	lstFormals.add(new Formal((Type)t,i.toString()));
	RESULT = lstFormals;
:} | {: RESULT = new ArrayList<Formal>(); :}; 
typelist::=  COMMA type:t ID:i typelist:lst 
{: 	ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
	lstFormals.add(new Formal((Type)t,i.toString()));
	RESULT = lstFormals; :} | {: RESULT = new ArrayList<Formal>(); :} ;