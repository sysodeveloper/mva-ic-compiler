
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 14 13:22:33 IST 2013
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 14 13:22:33 IST 2013
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\005\000\002\004\007" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\002\000\002\007\006\000\002" +
    "\010\005\000\002\010\002\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\040\005\000\002\040\005\000\002\011\010\000" +
    "\002\012\011\000\002\014\005\000\002\014\002\000\002" +
    "\017\006\000\002\017\002\000\002\020\006\000\002\020" +
    "\004\000\002\020\005\000\002\020\011\000\002\020\007" +
    "\000\002\020\007\000\002\020\004\000\002\020\004\000" +
    "\002\020\005\000\002\020\006\000\002\042\004\000\002" +
    "\042\002\000\002\021\004\000\002\021\002\000\002\023" +
    "\003\000\002\023\002\000\002\037\003\000\002\037\005" +
    "\000\002\037\006\000\002\024\003\000\002\024\003\000" +
    "\002\026\010\000\002\027\005\000\002\027\006\000\002" +
    "\041\006\000\002\030\004\000\002\030\002\000\002\031" +
    "\005\000\002\031\002\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\006\000\002\022\007\000\002\022\005\000\002\022\003" +
    "\000\002\022\004\000\002\022\004\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\006\002\ufffe\031\006\001\002\000\004\002" +
    "\263\001\002\000\006\002\ufffe\031\006\001\002\000\004" +
    "\057\011\001\002\000\006\002\ufffe\031\006\001\002\000" +
    "\004\002\uffff\001\002\000\006\012\014\020\012\001\002" +
    "\000\004\057\260\001\002\000\006\002\ufffd\031\ufffd\001" +
    "\002\000\020\013\ufff7\014\021\027\016\050\020\051\025" +
    "\055\023\057\024\001\002\000\006\010\172\025\252\001" +
    "\002\000\006\010\ufff3\025\ufff3\001\002\000\020\013\ufff7" +
    "\014\021\027\016\050\020\051\025\055\023\057\024\001" +
    "\002\000\014\014\021\027\016\051\025\055\023\057\024" +
    "\001\002\000\006\010\ufff2\025\ufff2\001\002\000\014\007" +
    "\uffe9\014\021\027\016\051\025\057\024\001\002\000\004" +
    "\025\034\001\002\000\006\010\ufff0\025\ufff0\001\002\000" +
    "\006\010\ufff1\025\ufff1\001\002\000\020\013\ufff7\014\021" +
    "\027\016\050\020\051\025\055\023\057\024\001\002\000" +
    "\020\013\ufff7\014\021\027\016\050\020\051\025\055\023" +
    "\057\024\001\002\000\004\013\031\001\002\000\006\002" +
    "\ufffb\031\ufffb\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\ufffa\001\002\000\004\006\035\001\002\000\014\007" +
    "\uffee\014\uffee\027\uffee\051\uffee\057\uffee\001\002\000\006" +
    "\010\172\025\232\001\002\000\004\007\040\001\002\000" +
    "\004\012\041\001\002\000\056\005\070\006\046\012\044" +
    "\013\uffdb\014\021\015\062\022\064\025\055\026\053\027" +
    "\016\033\067\034\060\040\063\044\073\046\051\051\025" +
    "\052\061\053\057\054\052\056\047\057\071\065\043\001" +
    "\002\000\042\004\227\010\uffb5\017\uffb5\023\uffb5\024\uffb5" +
    "\030\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\045\uffb5\066\uffb5\070\uffb5\001\002\000\004" +
    "\047\226\001\002\000\056\005\070\006\046\012\044\013" +
    "\uffdb\014\021\015\062\022\064\025\055\026\053\027\016" +
    "\033\067\034\060\040\063\044\073\046\051\051\025\052" +
    "\061\053\057\054\052\056\047\057\071\065\043\001\002" +
    "\000\042\010\uffb4\017\uffb4\023\uffb4\024\uffb4\030\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\045\uffb4\047\223\066\uffb4\070\uffb4\001\002\000\032\005" +
    "\070\006\046\022\064\025\055\033\067\034\060\040\063" +
    "\044\073\052\061\053\057\054\052\057\106\001\002\000" +
    "\004\006\215\001\002\000\034\005\070\006\046\007\uffcc" +
    "\022\064\025\055\033\067\034\060\040\063\044\073\052" +
    "\061\053\057\054\052\057\106\001\002\000\034\005\070" +
    "\006\046\022\064\025\055\033\067\034\060\040\063\044" +
    "\073\047\uffd7\052\061\053\057\054\052\057\106\001\002" +
    "\000\050\007\uffb8\010\uffb8\011\uffb8\016\uffb8\017\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\045\uffb8\047\uffb8\066\uffb8\070" +
    "\uffb8\001\002\000\004\006\202\001\002\000\040\010\127" +
    "\017\121\023\124\024\113\030\114\035\123\036\130\037" +
    "\116\040\110\041\117\042\115\043\120\045\122\066\112" +
    "\070\125\001\002\000\054\004\uffd6\006\177\007\uffd6\010" +
    "\uffd6\011\uffd6\016\uffd6\017\uffd6\023\uffd6\024\uffd6\030\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\045\uffd6\047\uffd6\066\uffd6\070\uffd6\001\002\000\006" +
    "\010\172\025\171\001\002\000\050\007\uffb3\010\uffb3\011" +
    "\uffb3\016\uffb3\017\uffb3\023\uffb3\024\uffb3\030\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\045" +
    "\uffb3\047\uffb3\066\uffb3\070\uffb3\001\002\000\032\005\070" +
    "\006\046\022\064\025\055\033\067\034\060\040\063\044" +
    "\073\052\061\053\057\054\052\057\106\001\002\000\050" +
    "\007\uffb9\010\uffb9\011\uffb9\016\uffb9\017\uffb9\023\uffb9\024" +
    "\uffb9\030\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\045\uffb9\047\uffb9\066\uffb9\070\uffb9\001" +
    "\002\000\004\047\167\001\002\000\032\005\070\006\046" +
    "\022\064\025\055\033\067\034\060\040\063\044\073\052" +
    "\061\053\057\054\052\057\106\001\002\000\050\007\uffb7" +
    "\010\uffb7\011\uffb7\016\uffb7\017\uffb7\023\uffb7\024\uffb7\030" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\045\uffb7\047\uffb7\066\uffb7\070\uffb7\001\002\000" +
    "\050\007\uffd3\010\uffd3\011\uffd3\016\uffd3\017\uffd3\023\uffd3" +
    "\024\uffd3\030\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\045\uffd3\047\uffd3\066\uffd3\070\uffd3" +
    "\001\002\000\056\005\070\006\046\012\044\013\uffdb\014" +
    "\021\015\062\022\064\025\055\026\053\027\016\033\067" +
    "\034\060\040\063\044\073\046\051\051\025\052\061\053" +
    "\057\054\052\056\047\057\071\065\043\001\002\000\012" +
    "\014\021\027\016\051\025\057\156\001\002\000\050\007" +
    "\uffba\010\uffba\011\uffba\016\uffba\017\uffba\023\uffba\024\uffba" +
    "\030\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\045\uffba\047\uffba\066\uffba\070\uffba\001\002" +
    "\000\010\010\ufff0\025\ufff0\070\077\001\002\000\050\007" +
    "\uffae\010\uffae\011\uffae\016\uffae\017\uffae\023\uffae\024\uffae" +
    "\030\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\045\uffae\047\uffae\066\uffae\070\uffae\001\002" +
    "\000\050\007\uffb6\010\uffb6\011\uffb6\016\uffb6\017\uffb6\023" +
    "\uffb6\024\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\045\uffb6\047\uffb6\066\uffb6\070" +
    "\uffb6\001\002\000\050\007\uffd2\010\uffd2\011\uffd2\016\uffd2" +
    "\017\uffd2\023\uffd2\024\uffd2\030\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\047\uffd2" +
    "\066\uffd2\070\uffd2\001\002\000\004\013\076\001\002\000" +
    "\020\013\uffec\014\uffec\027\uffec\050\uffec\051\uffec\055\uffec" +
    "\057\uffec\001\002\000\004\025\100\001\002\000\004\006" +
    "\101\001\002\000\034\005\070\006\046\007\uffcc\022\064" +
    "\025\055\033\067\034\060\040\063\044\073\052\061\053" +
    "\057\054\052\057\106\001\002\000\050\007\uffb5\010\uffb5" +
    "\011\uffb5\016\uffb5\017\uffb5\023\uffb5\024\uffb5\030\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\045\uffb5\047\uffb5\066\uffb5\070\uffb5\001\002\000\050\007" +
    "\uffb4\010\uffb4\011\uffb4\016\uffb4\017\uffb4\023\uffb4\024\uffb4" +
    "\030\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\045\uffb4\047\uffb4\066\uffb4\070\uffb4\001\002" +
    "\000\044\007\uffca\010\127\016\126\017\121\023\124\024" +
    "\113\030\114\035\123\036\130\037\116\040\110\041\117" +
    "\042\115\043\120\045\122\066\112\070\125\001\002\000" +
    "\004\007\107\001\002\000\004\070\077\001\002\000\050" +
    "\007\uffd1\010\uffd1\011\uffd1\016\uffd1\017\uffd1\023\uffd1\024" +
    "\uffd1\030\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\045\uffd1\047\uffd1\066\uffd1\070\uffd1\001" +
    "\002\000\032\005\070\006\046\022\064\025\055\033\067" +
    "\034\060\040\063\044\073\052\061\053\057\054\052\057" +
    "\106\001\002\000\004\007\uffcd\001\002\000\032\005\070" +
    "\006\046\022\064\025\055\033\067\034\060\040\063\044" +
    "\073\052\061\053\057\054\052\057\106\001\002\000\032" +
    "\005\070\006\046\022\064\025\055\033\067\034\060\040" +
    "\063\044\073\052\061\053\057\054\052\057\106\001\002" +
    "\000\032\005\070\006\046\022\064\025\055\033\067\034" +
    "\060\040\063\044\073\052\061\053\057\054\052\057\106" +
    "\001\002\000\032\005\070\006\046\022\064\025\055\033" +
    "\067\034\060\040\063\044\073\052\061\053\057\054\052" +
    "\057\106\001\002\000\032\005\070\006\046\022\064\025" +
    "\055\033\067\034\060\040\063\044\073\052\061\053\057" +
    "\054\052\057\106\001\002\000\032\005\070\006\046\022" +
    "\064\025\055\033\067\034\060\040\063\044\073\052\061" +
    "\053\057\054\052\057\106\001\002\000\032\005\070\006" +
    "\046\022\064\025\055\033\067\034\060\040\063\044\073" +
    "\052\061\053\057\054\052\057\106\001\002\000\032\005" +
    "\070\006\046\022\064\025\055\033\067\034\060\040\063" +
    "\044\073\052\061\053\057\054\052\057\106\001\002\000" +
    "\032\005\070\006\046\022\064\025\055\033\067\034\060" +
    "\040\063\044\073\052\061\053\057\054\052\057\106\001" +
    "\002\000\032\005\070\006\046\022\064\025\055\033\067" +
    "\034\060\040\063\044\073\052\061\053\057\054\052\057" +
    "\106\001\002\000\032\005\070\006\046\022\064\025\055" +
    "\033\067\034\060\040\063\044\073\052\061\053\057\054" +
    "\052\057\106\001\002\000\006\025\136\032\137\001\002" +
    "\000\032\005\070\006\046\022\064\025\055\033\067\034" +
    "\060\040\063\044\073\052\061\053\057\054\052\057\106" +
    "\001\002\000\032\005\070\006\046\022\064\025\055\033" +
    "\067\034\060\040\063\044\073\052\061\053\057\054\052" +
    "\057\106\001\002\000\032\005\070\006\046\022\064\025" +
    "\055\033\067\034\060\040\063\044\073\052\061\053\057" +
    "\054\052\057\106\001\002\000\050\007\uffa2\010\127\011" +
    "\uffa2\016\uffa2\017\uffa2\023\uffa2\024\uffa2\030\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\110\041\117\042\115\043\uffa2\045" +
    "\122\047\uffa2\066\112\070\125\001\002\000\042\010\127" +
    "\011\133\017\121\023\124\024\113\030\114\035\123\036" +
    "\130\037\116\040\110\041\117\042\115\043\120\045\122" +
    "\066\112\070\125\001\002\000\052\004\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\016\uffd4\017\uffd4\023\uffd4\024\uffd4\030\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\047\uffd4\066\uffd4\070\uffd4\001\002\000\044" +
    "\007\uffca\010\127\016\126\017\121\023\124\024\113\030" +
    "\114\035\123\036\130\037\116\040\110\041\117\042\115" +
    "\043\120\045\122\066\112\070\125\001\002\000\004\007" +
    "\uffcb\001\002\000\054\004\uffd5\006\140\007\uffd5\010\uffd5" +
    "\011\uffd5\016\uffd5\017\uffd5\023\uffd5\024\uffd5\030\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\045\uffd5\047\uffd5\066\uffd5\070\uffd5\001\002\000\050\007" +
    "\uffaf\010\uffaf\011\uffaf\016\uffaf\017\uffaf\023\uffaf\024\uffaf" +
    "\030\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\045\uffaf\047\uffaf\066\uffaf\070\uffaf\001\002" +
    "\000\034\005\uffce\006\uffce\007\uffce\022\uffce\025\uffce\033" +
    "\uffce\034\uffce\040\uffce\044\uffce\052\uffce\053\uffce\054\uffce" +
    "\057\uffce\001\002\000\050\007\uffa4\010\127\011\uffa4\016" +
    "\uffa4\017\uffa4\023\uffa4\024\uffa4\030\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\110\041\117\042\115\043\uffa4\045\122\047" +
    "\uffa4\066\112\070\125\001\002\000\050\007\uffa5\010\127" +
    "\011\uffa5\016\uffa5\017\121\023\124\024\113\030\114\035" +
    "\uffa5\036\130\037\116\040\110\041\117\042\115\043\120" +
    "\045\122\047\uffa5\066\112\070\125\001\002\000\050\007" +
    "\uffab\010\127\011\uffab\016\uffab\017\uffab\023\uffab\024\uffab" +
    "\030\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\117\042" +
    "\115\043\uffab\045\uffab\047\uffab\066\112\070\125\001\002" +
    "\000\050\007\uffa0\010\127\011\uffa0\016\uffa0\017\uffa0\023" +
    "\124\024\113\030\uffa0\035\uffa0\036\130\037\116\040\110" +
    "\041\117\042\115\043\uffa0\045\122\047\uffa0\066\112\070" +
    "\125\001\002\000\050\007\uff9f\010\127\011\uff9f\016\uff9f" +
    "\017\uff9f\023\124\024\113\030\uff9f\035\uff9f\036\130\037" +
    "\116\040\110\041\117\042\115\043\uff9f\045\122\047\uff9f" +
    "\066\112\070\125\001\002\000\050\007\uffa7\010\127\011" +
    "\uffa7\016\uffa7\017\uffa7\023\uffa7\024\uffa7\030\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\045" +
    "\uffa7\047\uffa7\066\uffa7\070\125\001\002\000\050\007\uffa1" +
    "\010\127\011\uffa1\016\uffa1\017\uffa1\023\uffa1\024\uffa1\030" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\110\041\117\042\115" +
    "\043\uffa1\045\122\047\uffa1\066\112\070\125\001\002\000" +
    "\050\007\uffa9\010\127\011\uffa9\016\uffa9\017\uffa9\023\uffa9" +
    "\024\uffa9\030\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\045\uffa9\047\uffa9\066\uffa9\070\125" +
    "\001\002\000\050\007\uffa6\010\127\011\uffa6\016\uffa6\017" +
    "\121\023\124\024\113\030\uffa6\035\uffa6\036\130\037\116" +
    "\040\110\041\117\042\115\043\120\045\122\047\uffa6\066" +
    "\112\070\125\001\002\000\050\007\uffa3\010\127\011\uffa3" +
    "\016\uffa3\017\uffa3\023\uffa3\024\uffa3\030\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\110\041\117\042\115\043\uffa3\045\122" +
    "\047\uffa3\066\112\070\125\001\002\000\050\007\uffa8\010" +
    "\127\011\uffa8\016\uffa8\017\uffa8\023\uffa8\024\uffa8\030\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\045\uffa8\047\uffa8\066\uffa8\070\125\001\002\000\050" +
    "\007\uffaa\010\127\011\uffaa\016\uffaa\017\uffaa\023\uffaa\024" +
    "\uffaa\030\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\117" +
    "\042\115\043\uffaa\045\uffaa\047\uffaa\066\112\070\125\001" +
    "\002\000\004\010\161\001\002\000\006\006\157\010\ufff0" +
    "\001\002\000\004\007\160\001\002\000\050\007\uffb1\010" +
    "\uffb1\011\uffb1\016\uffb1\017\uffb1\023\uffb1\024\uffb1\030\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\045\uffb1\047\uffb1\066\uffb1\070\uffb1\001\002\000\034" +
    "\005\070\006\046\011\163\022\064\025\055\033\067\034" +
    "\060\040\063\044\073\052\061\053\057\054\052\057\106" +
    "\001\002\000\042\010\127\011\164\017\121\023\124\024" +
    "\113\030\114\035\123\036\130\037\116\040\110\041\117" +
    "\042\115\043\120\045\122\066\112\070\125\001\002\000" +
    "\006\010\uffef\025\uffef\001\002\000\050\007\uffb0\010\uffb0" +
    "\011\uffb0\016\uffb0\017\uffb0\023\uffb0\024\uffb0\030\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\045\uffb0\047\uffb0\066\uffb0\070\uffb0\001\002\000\004\013" +
    "\uffdc\001\002\000\050\007\uffad\010\uffad\011\uffad\016\uffad" +
    "\017\uffad\023\uffad\024\uffad\030\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\045\uffad\047\uffad" +
    "\066\uffad\070\uffad\001\002\000\060\005\uffe0\006\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\033\uffe0\034\uffe0\040\uffe0\044\uffe0\046" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\065\uffe0\001\002\000\050\007\uffac\010\uffac\011\uffac\016" +
    "\uffac\017\uffac\023\uffac\024\uffac\030\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\045\uffac\047" +
    "\uffac\066\uffac\070\uffac\001\002\000\006\004\174\047\uffd9" +
    "\001\002\000\004\011\163\001\002\000\004\047\176\001" +
    "\002\000\032\005\070\006\046\022\064\025\055\033\067" +
    "\034\060\040\063\044\073\052\061\053\057\054\052\057" +
    "\106\001\002\000\042\010\127\017\121\023\124\024\113" +
    "\030\114\035\123\036\130\037\116\040\110\041\117\042" +
    "\115\043\120\045\122\047\uffda\066\112\070\125\001\002" +
    "\000\060\005\uffdd\006\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027\uffdd\033\uffdd" +
    "\034\uffdd\040\uffdd\044\uffdd\046\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\056\uffdd\057\uffdd\065\uffdd\001\002\000\034" +
    "\005\070\006\046\007\uffcc\022\064\025\055\033\067\034" +
    "\060\040\063\044\073\052\061\053\057\054\052\057\106" +
    "\001\002\000\004\007\201\001\002\000\050\007\uffcf\010" +
    "\uffcf\011\uffcf\016\uffcf\017\uffcf\023\uffcf\024\uffcf\030\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\045\uffcf\047\uffcf\066\uffcf\070\uffcf\001\002\000\032" +
    "\005\070\006\046\022\064\025\055\033\067\034\060\040" +
    "\063\044\073\052\061\053\057\054\052\057\106\001\002" +
    "\000\042\007\204\010\127\017\121\023\124\024\113\030" +
    "\114\035\123\036\130\037\116\040\110\041\117\042\115" +
    "\043\120\045\122\066\112\070\125\001\002\000\054\005" +
    "\070\006\046\012\044\014\021\015\062\022\064\025\055" +
    "\026\053\027\016\033\067\034\060\040\063\044\073\046" +
    "\051\051\025\052\061\053\057\054\052\056\047\057\071" +
    "\065\043\001\002\000\060\005\uffe2\006\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\021\206\022\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\033\uffe2\034\uffe2\040\uffe2\044\uffe2\046\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2\065\uffe2" +
    "\001\002\000\054\005\070\006\046\012\044\014\021\015" +
    "\062\022\064\025\055\026\053\027\016\033\067\034\060" +
    "\040\063\044\073\046\051\051\025\052\061\053\057\054" +
    "\052\056\047\057\071\065\043\001\002\000\060\005\uffe3" +
    "\006\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\021\uffe3\022" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\033\uffe3\034\uffe3\040\uffe3" +
    "\044\uffe3\046\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056" +
    "\uffe3\057\uffe3\065\uffe3\001\002\000\042\010\127\017\121" +
    "\023\124\024\113\030\114\035\123\036\130\037\116\040" +
    "\110\041\117\042\115\043\120\045\122\047\uffd8\066\112" +
    "\070\125\001\002\000\004\047\212\001\002\000\060\005" +
    "\uffe4\006\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\021\uffe4" +
    "\022\uffe4\025\uffe4\026\uffe4\027\uffe4\033\uffe4\034\uffe4\040" +
    "\uffe4\044\uffe4\046\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\056\uffe4\057\uffe4\065\uffe4\001\002\000\004\007\214\001" +
    "\002\000\050\007\uffd0\010\uffd0\011\uffd0\016\uffd0\017\uffd0" +
    "\023\uffd0\024\uffd0\030\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\047\uffd0\066\uffd0" +
    "\070\uffd0\001\002\000\032\005\070\006\046\022\064\025" +
    "\055\033\067\034\060\040\063\044\073\052\061\053\057" +
    "\054\052\057\106\001\002\000\042\007\217\010\127\017" +
    "\121\023\124\024\113\030\114\035\123\036\130\037\116" +
    "\040\110\041\117\042\115\043\120\045\122\066\112\070" +
    "\125\001\002\000\054\005\070\006\046\012\044\014\021" +
    "\015\062\022\064\025\055\026\053\027\016\033\067\034" +
    "\060\040\063\044\073\046\051\051\025\052\061\053\057" +
    "\054\052\056\047\057\071\065\043\001\002\000\060\005" +
    "\uffe1\006\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\021\uffe1" +
    "\022\uffe1\025\uffe1\026\uffe1\027\uffe1\033\uffe1\034\uffe1\040" +
    "\uffe1\044\uffe1\046\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\056\uffe1\057\uffe1\065\uffe1\001\002\000\042\007\222\010" +
    "\127\017\121\023\124\024\113\030\114\035\123\036\130" +
    "\037\116\040\110\041\117\042\115\043\120\045\122\066" +
    "\112\070\125\001\002\000\050\007\uffb2\010\uffb2\011\uffb2" +
    "\016\uffb2\017\uffb2\023\uffb2\024\uffb2\030\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2" +
    "\047\uffb2\066\uffb2\070\uffb2\001\002\000\060\005\uffe5\006" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\021\uffe5\022\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\033\uffe5\034\uffe5\040\uffe5\044" +
    "\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5" +
    "\057\uffe5\065\uffe5\001\002\000\004\013\225\001\002\000" +
    "\060\005\uffde\006\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde\033\uffde\034" +
    "\uffde\040\uffde\044\uffde\046\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\056\uffde\057\uffde\065\uffde\001\002\000\060\005" +
    "\uffdf\006\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\021\uffdf" +
    "\022\uffdf\025\uffdf\026\uffdf\027\uffdf\033\uffdf\034\uffdf\040" +
    "\uffdf\044\uffdf\046\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\056\uffdf\057\uffdf\065\uffdf\001\002\000\032\005\070\006" +
    "\046\022\064\025\055\033\067\034\060\040\063\044\073" +
    "\052\061\053\057\054\052\057\106\001\002\000\042\010" +
    "\127\017\121\023\124\024\113\030\114\035\123\036\130" +
    "\037\116\040\110\041\117\042\115\043\120\045\122\047" +
    "\231\066\112\070\125\001\002\000\060\005\uffe6\006\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\021\uffe6\022\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\033\uffe6\034\uffe6\040\uffe6\044\uffe6" +
    "\046\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6\057" +
    "\uffe6\065\uffe6\001\002\000\006\007\uffe7\016\233\001\002" +
    "\000\012\014\021\027\016\051\025\057\024\001\002\000" +
    "\004\007\uffea\001\002\000\006\010\172\025\236\001\002" +
    "\000\006\007\uffe7\016\233\001\002\000\004\007\uffe8\001" +
    "\002\000\006\010\172\025\247\001\002\000\014\007\uffe9" +
    "\014\021\027\016\051\025\057\024\001\002\000\004\007" +
    "\243\001\002\000\004\012\244\001\002\000\056\005\070" +
    "\006\046\012\044\013\uffdb\014\021\015\062\022\064\025" +
    "\055\026\053\027\016\033\067\034\060\040\063\044\073" +
    "\046\051\051\025\052\061\053\057\054\052\056\047\057" +
    "\071\065\043\001\002\000\004\013\246\001\002\000\020" +
    "\013\uffeb\014\uffeb\027\uffeb\050\uffeb\051\uffeb\055\uffeb\057" +
    "\uffeb\001\002\000\004\006\250\001\002\000\014\007\uffed" +
    "\014\uffed\027\uffed\051\uffed\057\uffed\001\002\000\004\013" +
    "\ufff9\001\002\000\010\006\250\016\253\047\ufff4\001\002" +
    "\000\004\025\256\001\002\000\004\047\255\001\002\000" +
    "\020\013\ufff6\014\ufff6\027\ufff6\050\ufff6\051\ufff6\055\ufff6" +
    "\057\ufff6\001\002\000\006\016\253\047\ufff4\001\002\000" +
    "\004\047\ufff5\001\002\000\004\012\014\001\002\000\006" +
    "\002\ufffc\031\ufffc\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\010\002\261\003\004\004\006\001\001" +
    "\000\002\001\001\000\010\002\007\003\004\004\006\001" +
    "\001\000\002\001\001\000\004\005\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\027\007\025\011" +
    "\026\012\016\016\014\040\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\250\007\025\011\026\012" +
    "\016\016\014\040\021\001\001\000\006\016\237\040\240" +
    "\001\001\000\002\001\001\000\006\014\036\016\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\032\007\025\011\026\012\016\016\014\040" +
    "\021\001\001\000\016\006\031\007\025\011\026\012\016" +
    "\016\014\040\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\055\020\065\022\053\024\044" +
    "\026\064\027\073\036\071\037\041\041\047\042\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\055" +
    "\020\065\022\053\024\044\026\064\027\073\036\071\037" +
    "\041\041\047\042\223\001\001\000\002\001\001\000\020" +
    "\022\220\024\102\026\064\027\073\036\071\037\101\041" +
    "\047\001\001\000\002\001\001\000\022\022\103\024\102" +
    "\026\064\027\073\030\212\036\071\037\101\041\047\001" +
    "\001\000\022\022\207\023\210\024\102\026\064\027\073" +
    "\036\071\037\101\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\167\024\102\026" +
    "\064\027\073\036\071\037\101\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\165\024\102\026" +
    "\064\027\073\036\071\037\101\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\055\020\065\022" +
    "\053\024\044\026\064\027\073\036\071\037\041\041\047" +
    "\042\164\001\001\000\004\016\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\022\103\024\102" +
    "\026\064\027\073\030\104\036\071\037\101\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\153\024\102\026\064\027\073\036\071" +
    "\037\101\041\047\001\001\000\002\001\001\000\020\022" +
    "\152\024\102\026\064\027\073\036\071\037\101\041\047" +
    "\001\001\000\020\022\151\024\102\026\064\027\073\036" +
    "\071\037\101\041\047\001\001\000\020\022\150\024\102" +
    "\026\064\027\073\036\071\037\101\041\047\001\001\000" +
    "\020\022\147\024\102\026\064\027\073\036\071\037\101" +
    "\041\047\001\001\000\020\022\146\024\102\026\064\027" +
    "\073\036\071\037\101\041\047\001\001\000\020\022\145" +
    "\024\102\026\064\027\073\036\071\037\101\041\047\001" +
    "\001\000\020\022\144\024\102\026\064\027\073\036\071" +
    "\037\101\041\047\001\001\000\020\022\143\024\102\026" +
    "\064\027\073\036\071\037\101\041\047\001\001\000\020" +
    "\022\142\024\102\026\064\027\073\036\071\037\101\041" +
    "\047\001\001\000\020\022\141\024\102\026\064\027\073" +
    "\036\071\037\101\041\047\001\001\000\020\022\140\024" +
    "\102\026\064\027\073\036\071\037\101\041\047\001\001" +
    "\000\002\001\001\000\020\022\133\024\102\026\064\027" +
    "\073\036\071\037\101\041\047\001\001\000\020\022\131" +
    "\024\102\026\064\027\073\036\071\037\101\041\047\001" +
    "\001\000\020\022\130\024\102\026\064\027\073\036\071" +
    "\037\101\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\161\024\102\026\064\027\073\036\071\037" +
    "\101\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\174\024" +
    "\102\026\064\027\073\036\071\037\101\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\022\103\024" +
    "\102\026\064\027\073\030\177\036\071\037\101\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\202\024\102\026\064\027\073\036\071\037\101\041\047" +
    "\001\001\000\002\001\001\000\024\016\055\020\204\022" +
    "\053\024\044\026\064\027\073\036\071\037\041\041\047" +
    "\001\001\000\002\001\001\000\024\016\055\020\206\022" +
    "\053\024\044\026\064\027\073\036\071\037\041\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\022\215\024\102\026\064\027\073\036\071\037" +
    "\101\041\047\001\001\000\002\001\001\000\024\016\055" +
    "\020\217\022\053\024\044\026\064\027\073\036\071\037" +
    "\041\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\227\024\102" +
    "\026\064\027\073\036\071\037\101\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\233\001\001" +
    "\000\004\016\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\241\016\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\055\020\065\022\053" +
    "\024\044\026\064\027\073\036\071\037\041\041\047\042" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\256\001\001\000\002\001\001\000" +
    "\004\005\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    currentToken = lexer.next_token();
    if (printTokens)
        System.out.println(currentToken.getLineNumber() + ":" + currentToken);
    return currentToken; 

    }


    /** Causes the parser to print every token it reads.
     * This is useful for debugging.
     */
    public boolean printTokens;
    
    private Lexer lexer;
    
    private Token currentToken;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }
    
    public int getLine() {
        return lexer.getLineNumber();
    }
    
    public void syntax_error(Symbol s) {
    return;
        //Token tok = (Token) s;
        /*
        System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
        */
    }
    
    public void unrecovered_syntax_error(Symbol s) throws SyntaxError{
    	Token tok = (Token) s;
    	throw new SyntaxError(tok,tok.getLineNumber());
    }
    
    public Token getCurrentToken(){
    	return currentToken;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr NEQUAL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.NEQUAL,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr EQUAL Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.EQUAL,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr LTE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LTE,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LT,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr GTE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.GTE,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.GT,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr LOR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LOR,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr LAND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp((Expression)e1,BinaryOps.LAND,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MOD,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr DIVIDE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp((Expression)e1,BinaryOps.DIVIDE,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr MULTIPLY Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MULTIPLY,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp((Expression)e1,BinaryOps.MINUS,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp((Expression)e1,BinaryOps.PLUS,(Expression)e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= LNEG Expr 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(UnaryOps.LNEG,(Expression)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int umleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int umright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object um = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(UnaryOps.UMINUS,(Expression)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Literal 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DOT LENGTH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length((Expression)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= NEW Type LB Expr RB 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new  NewArray((Type)t,(Expression)e);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= NEW CLASS_ID LP RP 
            {
              Object RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass(cidleft, cid.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= LP Expr RP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionBlock((Expression)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= THIS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Call 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Location 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Literal ::= NULL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(lleft,LiteralTypes.NULL,l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Literal ::= FALSE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(lleft,LiteralTypes.FALSE,l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Literal ::= TRUE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(lleft,LiteralTypes.TRUE,l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Literal ::= QUOTE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(lleft,LiteralTypes.STRING,l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Literal ::= INTEGER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(lleft,LiteralTypes.INTEGER,l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Unop ::= LNEG 
            {
              Object RESULT =null;
		 RESULT = UnaryOps.LNEG;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Unop ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = UnaryOps.UMINUS;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Binop ::= NEQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.NEQUAL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Binop ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.EQUAL;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Binop ::= LTE 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.LTE;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Binop ::= LT 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.LT;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Binop ::= GTE 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.GTE;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Binop ::= GT 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.GT;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Binop ::= LOR 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.LOR;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Binop ::= LAND 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.LAND;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Binop ::= MOD 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.MOD;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Binop ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.DIVIDE;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Binop ::= MULTIPLY 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.MULTIPLY;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Binop ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.MINUS;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Binop ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = BinaryOps.PLUS;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArgumentsList ::= 
            {
              Object RESULT =null;
		  RESULT = new ArrayList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ArgumentsList ::= COMMA Expr ArgumentsList 
            {
              Object RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argument = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arglist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  ((ArrayList<Expression>)arglist).add(0, (Expression)argument); RESULT = arglist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arguments ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Arguments ::= Expr ArgumentsList 
            {
              Object RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argument = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arglistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arglistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arglist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>)arglist).add(0, (Expression)argument); RESULT = arglist;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VirtualCallPrefix ::= Expr DOT ID LP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
											 Object callPrefix[] = new Object[2];
											 callPrefix[0]=e;  callPrefix[1]=id; 
											 RESULT = callPrefix;
									     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCallPrefix",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VirtualCall ::= ID LP Arguments RP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argsList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(idleft,id.toString(),(List<Expression>)argsList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VirtualCall ::= VirtualCallPrefix Arguments RP 
            {
              Object RESULT =null;
		int callPrefixleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int callPrefixright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object callPrefix = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argsList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
					 	Object prefix[] = new Object[2];
					 	prefix = (Object[])callPrefix;
					 	RESULT = new VirtualCall(callPrefixleft,(Expression)prefix[0],prefix[1].toString(),(List<Expression>)argsList);
					 
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StaticCall ::= CLASS_ID DOT ID LP Arguments RP 
            {
              Object RESULT =null;
		int class_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int class_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object class_id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argsList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT = new StaticCall(idleft, class_id.toString(), id.toString(),(List<Expression>) argsList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Call ::= VirtualCall 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = vc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Call ::= StaticCall 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Location ::= Expr LB Expr RB 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation((Expression) array, (Expression) index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Location ::= Expr DOT ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(eleft,(Expression)e, id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Location ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(idleft, id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExprOrEmpty ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOrEmpty",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExprOrEmpty ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOrEmpty",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InitVariable ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitVariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InitVariable ::= ASSIGN Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitVariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementStar ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementStar",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatementStar ::= Statement StatementStar 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							   
							   	ArrayList<Statement> lst = new ArrayList<Statement>();
							   	if(stmList != null) lst.addAll((ArrayList<Statement>)stmList);
							   if(stm != null) lst.add(0, (Statement)stm);
							   	RESULT = lst;
							   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementStar",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= Type ID InitVariable SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(e!=null) RESULT = new LocalVariable((Type)t, id.toString() , (Expression)e); else RESULT = new LocalVariable((Type)t, id.toString() );  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= LCBR StatementStar RCBR 
            {
              Object RESULT =null;
		int stmListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementsBlock(stmListleft,(List<Statement>) stmList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(cleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(bleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= WHILE LP Expr RP Statement 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object condition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						if(stm instanceof LocalVariable){
							String msg = "definition of local variable " +((LocalVariable)stm).getName() + " is not allowed ";
     						throw new SyntaxError(new Token(sym.SEMI,stmleft,";"), stmleft,msg);
     					} 
						RESULT = new While((Expression)condition, (Statement)stm);
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= IF LP Expr RP Statement 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object condition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ifStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifStm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					 	if(ifStm instanceof LocalVariable){
							  String msg = "definition of local variable " +((LocalVariable)ifStm).getName() + " is not allowed ";
     						  throw new SyntaxError(new Token(sym.SEMI,ifStmleft,";"), ifStmleft,msg);
     					}
					 	RESULT = new If((Expression)condition, (Statement)ifStm);
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= IF LP Expr RP Statement ELSE Statement 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object condition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ifStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ifStm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseStmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseStmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseStm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						if(ifStm instanceof LocalVariable){
							  String msg = "definition of local variable " +((LocalVariable)ifStm).getName() + " is not allowed ";
     						  throw new SyntaxError(new Token(sym.SEMI,ifStmleft,";"), ifStmleft,msg);
     					}
     					if(elseStm instanceof LocalVariable){
							  String msg = "definition of local variable " +((LocalVariable)elseStm).getName() + " is not allowed ";
     						  throw new SyntaxError(new Token(sym.SEMI,elseStmleft,";"), elseStmleft,msg);
     					}
						RESULT = new If((Expression)condition, (Statement)ifStm, (Statement)elseStm);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= RETURN ExprOrEmpty SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (e==null)? new Return(eleft): new Return(eleft,(Expression)e); 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Call SEMI 
            {
              Object RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object call = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new  CallStatement((Call)call);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Location ASSIGN Expr SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new  Assignment((Location)l, (Expression)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeList ::= 
            {
              Object RESULT =null;
		  RESULT = new ArrayList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeList ::= COMMA Type ID TypeList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
				lstFormals.add(0, new Formal((Type)t,i.toString()));
				RESULT = lstFormals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;
		  RESULT = new ArrayList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= Type ID TypeList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			ArrayList<Formal> lstFormals = (ArrayList<Formal>)lst;
				lstFormals.add(0, new Formal((Type)t,i.toString()));
				RESULT = lstFormals;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StaticMethod ::= STATIC MethodPrefix Formals RP LCBR StatementStar RCBR 
            {
              Object RESULT =null;
		int mPrefixleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mPrefixright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object mPrefix = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object formals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Object[] prefix = new Object[2];
						prefix = (Object[])mPrefix;
						RESULT = new StaticMethod((Type)prefix[0], prefix[1].toString(), (List<Formal>) formals, (List<Statement>) statements);	
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticMethod",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VirtualMethod ::= MethodPrefix Formals RP LCBR StatementStar RCBR 
            {
              Object RESULT =null;
		int mPrefixleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mPrefixright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object mPrefix = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object formals = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
						Object[] prefix = new Object[2];
						prefix = (Object[])mPrefix;
						RESULT = new VirtualMethod((Type)prefix[0], prefix[1].toString(), (List<Formal>) formals, (List<Statement>) statements);	
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualMethod",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MethodPrefix ::= Type ID LP 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				 			Object methodPrefix[] = new Object[2];
							methodPrefix[0]=t; methodPrefix[1]=id;
							RESULT = methodPrefix;
				 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodPrefix",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MethodPrefix ::= VOID ID LP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
							Object methodPrefix[] = new Object[2];
							methodPrefix[0]=new PrimitiveType(idleft,DataTypes.VOID); methodPrefix[1]=id;
							RESULT = methodPrefix;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodPrefix",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type LB RB 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ((Type)t).incrementDimension(); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= CLASS_ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UserType(cleft,c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(tleft, DataTypes.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(tleft, DataTypes.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrimitiveType(tleft, DataTypes.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Field>();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldList ::= COMMA ID FieldList 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object flst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Field> lstFields = (ArrayList<Field>)flst;
			 	lstFields.add(0, new Field(new PrimitiveType(ileft, DataTypes.INT) ,i.toString()) );
			 	RESULT = lstFields; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= Type ID FieldList SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object flst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			 
			ArrayList<Field> lstFields = (ArrayList<Field>)flst;
			ArrayList<Field> TypedFields = new ArrayList<Field>();
			
			for(Field f : lstFields){
				TypedFields.add(0, new Field((Type)(((Type)t).clone()),f.getName()));				
			}
				
			TypedFields.add(0, new Field((Type)t, i.toString()) );  
			RESULT = TypedFields;	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FieldOrMethod ::= 
            {
              Object RESULT =null;
		 
  				 										 	ArrayList<Field> fields = new ArrayList<Field>();
  				 										 	ArrayList<Method> methods = new ArrayList<Method>();
  				 										 	Object[] fom = new Object[2];
  				 										 	fom[0] = fields; fom[1] = methods;  				 										 	
  				 										 	RESULT = fom; 
  				 										 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FieldOrMethod ::= VirtualMethod FieldOrMethod 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  				  											Object[] arr = new Object[2];
  				  											arr = (Object[])fom;		
  				  											((ArrayList<Method>)arr[1]).add(0, (Method)method);
 				  											RESULT = arr; 
 				  										 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FieldOrMethod ::= StaticMethod FieldOrMethod 
            {
              Object RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object method = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 				  											Object[] arr = new Object[2];
  				  											arr = (Object[])fom;		
  				  											((ArrayList<Method>)arr[1]).add(0, (Method)method);
 				  											RESULT = arr;  
 				  										 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldOrMethod ::= Field FieldOrMethod 
            {
              Object RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object field = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Object[] arr = new Object[2];
  				  											arr = (Object[])fom;		
  				  											ArrayList<Field> fieldList = (ArrayList<Field>)field;
  				  											ArrayList<Field> prevList = (ArrayList<Field>)arr[0];
  				  											for(Field f:fieldList)
  				  												prevList.add(0, f);
  				  											arr[0]=prevList;
 				  											RESULT = arr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassContent ::= LCBR FieldOrMethod RCBR 
            {
              Object RESULT =null;
		int fomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object fom = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fom; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassContent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassICEx ::= CLASS CLASS_ID EXTENDS CLASS_ID ClassContent 
            {
              Object RESULT =null;
		int derivedClassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int derivedClassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object derivedClass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int baseClassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int baseClassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object baseClass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object content = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							Object[] classContent = new Object[2];
							classContent = (Object[])content;
							ArrayList<Field> fields = (ArrayList<Field>)classContent[0];
							ArrayList<Method> methods = (ArrayList<Method>)classContent[1];
							RESULT = new ICClass(derivedClassleft, derivedClass.toString(),baseClass.toString(), fields, methods);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassICEx",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassIC ::= CLASS CLASS_ID ClassContent 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object content = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
				
							Object[] classContent = new Object[2];
							classContent = (Object[])content;
							ArrayList<Field> fields = (ArrayList<Field>)classContent[0];
							ArrayList<Method> methods = (ArrayList<Method>)classContent[1];
							RESULT = new ICClass(classNameleft, className.toString(), fields, methods);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassIC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= 
            {
              Program RESULT =null;
		 RESULT = new Program(new ArrayList<ICClass>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ClassICEx Program 
            {
              Program RESULT =null;
		int icClassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int icClassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object icClass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
						Program p = new Program(new ArrayList<ICClass>());
						p = (Program)program;
						List<ICClass> classes = p.getClasses();
						classes.add(0, (ICClass)icClass);
						RESULT = new Program(classes);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ClassIC Program 
            {
              Program RESULT =null;
		int icClassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int icClassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object icClass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
						Program p = new Program(new ArrayList<ICClass>());
						p = (Program)program;
						List<ICClass> classes = p.getClasses();
						classes.add(0, (ICClass)icClass);
						RESULT = new Program(classes);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

