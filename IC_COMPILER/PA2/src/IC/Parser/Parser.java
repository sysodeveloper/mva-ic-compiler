
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 04 23:12:25 IST 2012
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 04 23:12:25 IST 2012
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\005\000\002\004\007" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\002\000\002\007\006\000\002" +
    "\010\005\000\002\010\002\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\011\010\000\002\037\005\000\002\037\005\000" +
    "\002\012\011\000\002\014\005\000\002\014\002\000\002" +
    "\017\006\000\002\017\002\000\002\020\005\000\002\020" +
    "\004\000\002\020\006\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\020\010\000\002\020\007\000" +
    "\002\020\006\000\002\020\004\000\002\015\004\000\002" +
    "\015\002\000\002\021\004\000\002\021\002\000\002\023" +
    "\003\000\002\023\002\000\002\025\004\000\002\025\002" +
    "\000\002\041\007\000\002\036\003\000\002\036\005\000" +
    "\002\036\006\000\002\024\003\000\002\024\003\000\002" +
    "\026\010\000\002\027\005\000\002\027\006\000\002\040" +
    "\006\000\002\030\004\000\002\030\002\000\002\031\005" +
    "\000\002\031\002\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\022\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\ufffe\031\006\001\002\000\004\002" +
    "\210\001\002\000\006\002\ufffe\031\006\001\002\000\004" +
    "\057\011\001\002\000\006\002\ufffe\031\006\001\002\000" +
    "\004\002\uffff\001\002\000\006\012\014\020\012\001\002" +
    "\000\004\057\205\001\002\000\006\002\ufffd\031\ufffd\001" +
    "\002\000\020\013\ufff7\014\021\027\016\050\020\051\025" +
    "\055\023\057\024\001\002\000\006\010\107\025\177\001" +
    "\002\000\006\010\ufff3\025\ufff3\001\002\000\020\013\ufff7" +
    "\014\021\027\016\050\020\051\025\055\023\057\024\001" +
    "\002\000\014\014\021\027\016\051\025\055\023\057\024" +
    "\001\002\000\006\010\ufff2\025\ufff2\001\002\000\014\007" +
    "\uffe9\014\021\027\016\051\025\057\024\001\002\000\004" +
    "\025\034\001\002\000\006\010\ufff0\025\ufff0\001\002\000" +
    "\006\010\ufff1\025\ufff1\001\002\000\020\013\ufff7\014\021" +
    "\027\016\050\020\051\025\055\023\057\024\001\002\000" +
    "\020\013\ufff7\014\021\027\016\050\020\051\025\055\023" +
    "\057\024\001\002\000\004\013\031\001\002\000\006\002" +
    "\ufffb\031\ufffb\001\002\000\004\013\ufff8\001\002\000\004" +
    "\013\ufffa\001\002\000\004\006\035\001\002\000\014\007" +
    "\uffed\014\uffed\027\uffed\051\uffed\057\uffed\001\002\000\006" +
    "\010\107\025\157\001\002\000\004\007\040\001\002\000" +
    "\004\012\041\001\002\000\044\005\064\012\045\013\uffdb" +
    "\014\021\015\060\022\061\025\055\026\053\027\016\044" +
    "\067\046\050\051\025\052\057\054\051\056\046\057\066" +
    "\065\043\001\002\000\004\004\154\001\002\000\004\047" +
    "\153\001\002\000\004\047\152\001\002\000\044\005\064" +
    "\012\045\013\150\014\021\015\060\022\061\025\055\026" +
    "\053\027\016\044\067\046\050\051\025\052\057\054\051" +
    "\056\046\057\066\065\043\001\002\000\004\006\143\001" +
    "\002\000\020\005\064\007\uffc9\022\061\025\076\044\067" +
    "\052\057\054\051\001\002\000\020\005\064\022\061\025" +
    "\076\044\067\047\uffd7\052\057\054\051\001\002\000\016" +
    "\007\uffb5\010\uffb5\011\uffb5\016\uffb5\047\uffb5\070\uffb5\001" +
    "\002\000\004\013\135\001\002\000\004\006\126\001\002" +
    "\000\006\010\120\070\121\001\002\000\012\004\uffd3\006" +
    "\115\010\uffb1\070\uffb1\001\002\000\006\010\107\025\106" +
    "\001\002\000\016\007\uffb6\010\uffb6\011\uffb6\016\uffb6\047" +
    "\uffb6\070\uffb6\001\002\000\004\047\105\001\002\000\016" +
    "\007\uffb4\010\uffb4\011\uffb4\016\uffb4\047\uffb4\070\uffb4\001" +
    "\002\000\044\005\064\012\045\013\uffdb\014\021\015\060" +
    "\022\061\025\055\026\053\027\016\044\067\046\050\051" +
    "\025\052\057\054\051\056\046\057\066\065\043\001\002" +
    "\000\004\047\uffd0\001\002\000\016\007\uffb7\010\uffb7\011" +
    "\uffb7\016\uffb7\047\uffb7\070\uffb7\001\002\000\016\007\uffb2" +
    "\010\uffb2\011\uffb2\016\uffb2\047\uffb2\070\uffb2\001\002\000" +
    "\010\010\ufff0\025\ufff0\070\071\001\002\000\016\007\uffb3" +
    "\010\uffb3\011\uffb3\016\uffb3\047\uffb3\070\uffb3\001\002\000" +
    "\004\047\uffcf\001\002\000\004\025\072\001\002\000\004" +
    "\006\073\001\002\000\020\005\064\007\uffc9\022\061\025" +
    "\076\044\067\052\057\054\051\001\002\000\004\007\103" +
    "\001\002\000\006\007\uffc7\016\077\001\002\000\012\007" +
    "\uffb1\011\uffb1\016\uffb1\047\uffb1\001\002\000\016\005\064" +
    "\022\061\025\076\044\067\052\057\054\051\001\002\000" +
    "\004\007\uffca\001\002\000\006\007\uffc7\016\077\001\002" +
    "\000\004\007\uffc8\001\002\000\004\047\uffce\001\002\000" +
    "\004\013\uffdc\001\002\000\046\005\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\021\uffe2\022\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\044\uffe2\046\uffe2\051\uffe2\052\uffe2\054\uffe2\056\uffe2" +
    "\057\uffe2\065\uffe2\001\002\000\006\004\112\047\uffd9\001" +
    "\002\000\004\011\110\001\002\000\006\010\uffef\025\uffef" +
    "\001\002\000\004\047\114\001\002\000\016\005\064\022" +
    "\061\025\076\044\067\052\057\054\051\001\002\000\004" +
    "\047\uffda\001\002\000\046\005\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\044\uffe4\046\uffe4\051\uffe4\052\uffe4\054\uffe4\056\uffe4\057" +
    "\uffe4\065\uffe4\001\002\000\020\005\064\007\uffc9\022\061" +
    "\025\076\044\067\052\057\054\051\001\002\000\004\007" +
    "\117\001\002\000\004\047\uffcc\001\002\000\016\005\064" +
    "\022\061\025\076\044\067\052\057\054\051\001\002\000" +
    "\004\025\122\001\002\000\006\004\uffd2\006\123\001\002" +
    "\000\020\005\uffcb\007\uffcb\022\uffcb\025\uffcb\044\uffcb\052" +
    "\uffcb\054\uffcb\001\002\000\004\011\125\001\002\000\004" +
    "\004\uffd1\001\002\000\016\005\064\022\061\025\076\044" +
    "\067\052\057\054\051\001\002\000\004\007\130\001\002" +
    "\000\042\005\064\012\045\014\021\015\060\022\061\025" +
    "\055\026\053\027\016\044\067\046\050\051\025\052\057" +
    "\054\051\056\046\057\066\065\043\001\002\000\046\005" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\021\132\022\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\044\uffd5\046\uffd5\051\uffd5\052" +
    "\uffd5\054\uffd5\056\uffd5\057\uffd5\065\uffd5\001\002\000\042" +
    "\005\064\012\045\014\021\015\060\022\061\025\055\026" +
    "\053\027\016\044\067\046\050\051\025\052\057\054\051" +
    "\056\046\057\066\065\043\001\002\000\046\005\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\044\uffe0\046\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\056\uffe0\057\uffe0\065\uffe0\001\002\000\046\005\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\021\uffd6\022\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\044\uffd6\046\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\056\uffd6\057\uffd6\065\uffd6\001\002\000\020\013" +
    "\uffee\014\uffee\027\uffee\050\uffee\051\uffee\055\uffee\057\uffee" +
    "\001\002\000\004\047\uffd8\001\002\000\004\047\140\001" +
    "\002\000\046\005\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\044\uffe1\046" +
    "\uffe1\051\uffe1\052\uffe1\054\uffe1\056\uffe1\057\uffe1\065\uffe1" +
    "\001\002\000\004\007\142\001\002\000\004\047\uffcd\001" +
    "\002\000\016\005\064\022\061\025\076\044\067\052\057" +
    "\054\051\001\002\000\004\007\145\001\002\000\042\005" +
    "\064\012\045\014\021\015\060\022\061\025\055\026\053" +
    "\027\016\044\067\046\050\051\025\052\057\054\051\056" +
    "\046\057\066\065\043\001\002\000\046\005\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\021\uffdf\022\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\044\uffdf\046\uffdf\051\uffdf\052\uffdf\054\uffdf" +
    "\056\uffdf\057\uffdf\065\uffdf\001\002\000\004\013\151\001" +
    "\002\000\046\005\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\021\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5\044\uffe5\046" +
    "\uffe5\051\uffe5\052\uffe5\054\uffe5\056\uffe5\057\uffe5\065\uffe5" +
    "\001\002\000\046\005\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\021\uffe6\022\uffe6\025\uffe6\026\uffe6\027\uffe6\044\uffe6" +
    "\046\uffe6\051\uffe6\052\uffe6\054\uffe6\056\uffe6\057\uffe6\065" +
    "\uffe6\001\002\000\046\005\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027\uffdd\044" +
    "\uffdd\046\uffdd\051\uffdd\052\uffdd\054\uffdd\056\uffdd\057\uffdd" +
    "\065\uffdd\001\002\000\046\005\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\021\uffe3\022\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\044\uffe3\046\uffe3\051\uffe3\052\uffe3\054\uffe3\056\uffe3\057" +
    "\uffe3\065\uffe3\001\002\000\016\005\064\022\061\025\076" +
    "\044\067\052\057\054\051\001\002\000\004\047\156\001" +
    "\002\000\046\005\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde\044\uffde\046" +
    "\uffde\051\uffde\052\uffde\054\uffde\056\uffde\057\uffde\065\uffde" +
    "\001\002\000\006\007\uffe7\016\160\001\002\000\012\014" +
    "\021\027\016\051\025\057\024\001\002\000\004\007\uffea" +
    "\001\002\000\006\010\107\025\163\001\002\000\006\007" +
    "\uffe7\016\160\001\002\000\004\007\uffe8\001\002\000\006" +
    "\010\107\025\174\001\002\000\014\007\uffe9\014\021\027" +
    "\016\051\025\057\024\001\002\000\004\007\170\001\002" +
    "\000\004\012\171\001\002\000\044\005\064\012\045\013" +
    "\uffdb\014\021\015\060\022\061\025\055\026\053\027\016" +
    "\044\067\046\050\051\025\052\057\054\051\056\046\057" +
    "\066\065\043\001\002\000\004\013\173\001\002\000\020" +
    "\013\uffeb\014\uffeb\027\uffeb\050\uffeb\051\uffeb\055\uffeb\057" +
    "\uffeb\001\002\000\004\006\175\001\002\000\014\007\uffec" +
    "\014\uffec\027\uffec\051\uffec\057\uffec\001\002\000\004\013" +
    "\ufff9\001\002\000\010\006\175\016\200\047\ufff4\001\002" +
    "\000\004\025\203\001\002\000\004\047\202\001\002\000" +
    "\020\013\ufff6\014\ufff6\027\ufff6\050\ufff6\051\ufff6\055\ufff6" +
    "\057\ufff6\001\002\000\006\016\200\047\ufff4\001\002\000" +
    "\004\047\ufff5\001\002\000\004\012\014\001\002\000\006" +
    "\002\ufffc\031\ufffc\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\010\002\206\003\004\004\006\001\001" +
    "\000\002\001\001\000\010\002\007\003\004\004\006\001" +
    "\001\000\002\001\001\000\004\005\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\027\007\025\011" +
    "\026\012\016\016\014\037\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\175\007\025\011\026\012" +
    "\016\016\014\037\021\001\001\000\006\016\164\037\165" +
    "\001\001\000\002\001\001\000\006\014\036\016\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\032\007\025\011\026\012\016\016\014\037" +
    "\021\001\001\000\016\006\031\007\025\011\026\012\016" +
    "\016\014\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\051\016\055\020\061\022\053" +
    "\024\043\026\062\027\067\035\064\036\041\040\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\055\020\146\022\053\024\043\026\062\027" +
    "\067\035\064\036\041\040\046\001\001\000\002\001\001" +
    "\000\010\022\074\030\140\035\064\001\001\000\010\022" +
    "\135\023\136\035\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\015\103\016\055\020\061\022" +
    "\053\024\043\026\062\027\067\035\064\036\041\040\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\074\030" +
    "\073\035\064\001\001\000\002\001\001\000\004\031\077" +
    "\001\001\000\002\001\001\000\006\022\100\035\064\001" +
    "\001\000\002\001\001\000\004\031\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\112\035\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\074" +
    "\030\115\035\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\123\035\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\126\035\064\001\001\000\002" +
    "\001\001\000\024\016\055\020\130\022\053\024\043\026" +
    "\062\027\067\035\064\036\041\040\046\001\001\000\004" +
    "\025\132\001\001\000\024\016\055\020\133\022\053\024" +
    "\043\026\062\027\067\035\064\036\041\040\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\143\035\064\001" +
    "\001\000\002\001\001\000\024\016\055\020\145\022\053" +
    "\024\043\026\062\027\067\035\064\036\041\040\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\154\035\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\160\001\001\000\004\016\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\166\016\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\171\016\055\020\061\022\053\024\043\026" +
    "\062\027\067\035\064\036\041\040\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\203\001\001\000\002\001\001\000\004\005\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Token t = lexer.next_token();
    if (printTokens)
        System.out.println(t.getLineNumber() + ":" + t);
    return t; 

    }


    /** Causes the parser to print every token it reads.
     * This is useful for debugging.
     */
    public boolean printTokens;
    
    private Lexer lexer;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }
    
    public int getLine() {
        return lexer.getLineNumber();
    }
    
    public void syntax_error(Symbol s) {
        Token tok = (Token) s;
        System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
    }
    
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Literal ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Literal ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Literal ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Literal ::= QUOTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Unop ::= LNEG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Binop ::= NEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Binop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Binop ::= LTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Binop ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Binop ::= GTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Binop ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Binop ::= LOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Binop ::= LAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Binop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Binop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Binop ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ArgumentsList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArgumentsList ::= COMMA Expr ArgumentsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentsList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Arguments ::= Expr ArgumentsList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VirtualCallPrefix ::= Expr DOT ID LP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCallPrefix",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VirtualCall ::= ID LP Arguments RP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VirtualCall ::= VirtualCallPrefix Arguments RP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StaticCall ::= CLASS_ID DOT ID LP Arguments RP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Call ::= VirtualCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Call ::= StaticCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Location ::= Expr LB Expr RB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Location ::= Expr DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Location ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IFExpr ::= IF LP Expr RP Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFExpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ElseStatement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ElseStatement ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStatement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExprOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOrEmpty",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExprOrEmpty ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprOrEmpty",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InitVariable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitVariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InitVariable ::= ASSIGN Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitVariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatmentOrEmpty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatmentOrEmpty",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatmentOrEmpty ::= Statement StatmentOrEmpty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatmentOrEmpty",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= Call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= Location ASSIGN Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= WHILE LP Expr RP Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= IF LP Expr RP Statement ElseStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= RETURN ExprOrEmpty SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Type ID InitVariable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= LCBR RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= LCBR Statement RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TypeList ::= COMMA Type ID TypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= Type ID TypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StaticMethod ::= STATIC MethodPrefix Formals RP LCBR StatmentOrEmpty RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticMethod",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodPrefix ::= Type ID LP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodPrefix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MethodPrefix ::= VOID ID LP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodPrefix",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VirtualMethod ::= MethodPrefix Formals RP LCBR StatmentOrEmpty RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualMethod",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type LB RB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= CLASS_ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldList ::= COMMA ID FieldList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= Type ID FieldList SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FieldOrMethod ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FieldOrMethod ::= VirtualMethod FieldOrMethod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FieldOrMethod ::= StaticMethod FieldOrMethod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldOrMethod ::= Field FieldOrMethod 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldOrMethod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassContent ::= LCBR FieldOrMethod RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassContent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassICEx ::= CLASS CLASS_ID EXTENDS CLASS_ID ClassContent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassICEx",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassIC ::= CLASS CLASS_ID ClassContent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassIC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ClassICEx Program 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ClassIC Program 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

