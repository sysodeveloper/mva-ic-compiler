package IC.Parser;
import IC.AST.*;
import java_cup.runtime.*;
parser code  {:
	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLineNumber() + ":" + t);
	return t; 
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

non terminal libic, libmethod, type, formals, typelist;
terminal int CLASS, CLASS_ID, LCBR, RCBR, STATIC, VOID, ID, LP, RP, SEMI, LB, RB;
terminal int INT, BOOLEAN, STRING, COMMA;
//////////////////////////
// Precedence declarations

//////////////
// The grammar

libic::= CLASS | CLASS CLASS_ID LCBR libmethod RCBR;
libmethod::=  | STATIC type ID LP formals RP SEMI | STATIC VOID ID LP formals RP SEMI;
type::= INT | BOOLEAN | STRING | CLASS_ID | type LB RB;
formals::= type ID typelist | ;
typelist::=  | COMMA type ID typelist;
