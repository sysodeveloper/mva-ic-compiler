package IC.Parser;
import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
parser code  {:
	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLineNumber()+": Syntax error; unexpected " + tok);
	}
	
	
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLineNumber() + ":" + t);
	return t; 
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

non terminal libic, libmethod, type, formals, typelist, userclass;
terminal         ASSIGN;
terminal Integer INTEGER;
terminal LP, RP , LB , RB , LCBR , RCBR , BOOLEAN , BREAK , COMMA , DOT , EQUAL , EXTENDS , ELSE , FALSE , GT , GTE , ID , IF , INT  , LAND , CLASS , LENGTH , NEW , LNEG , LOR , LT , LTE , MINUS , MOD , MULTIPLY , NEQUAL , NULL , PLUS , RETURN , SEMI , STATIC , STRING , QUOTE , THIS , TRUE , VOID , WHILE , CLASS_ID , PLUSPLUS , MINUSMINUS , PLUSEQUAL , MINUSEQUAL , MULTIPLYEQUAL, CONTINUE, DIVIDE, DIVIDEEQUAL;
//////////////////////////
// Precedence declarations

//////////////
// The grammar
libic ::= CLASS CLASS_ID LCBR:l libmethod:m RCBR;
libmethod ::=  | STATIC type ID LP formals RP SEMI libmethod | STATIC VOID ID LP formals RP SEMI libmethod;
type::= INT 
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.INT); :} | 
BOOLEAN
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.BOOLEAN); :} | 
STRING 
{: RESULT = new PrimitiveType(parser.getLine(), DataTypes.STRING); :} | 
CLASS_ID:c
{: RESULT = new UserType(parser.getLine(),c.toString()); :} | 
type:t LB RB
{:((Type)t).incrementDimension(); RESULT = t; :};
formals::= type:t ID:i typelist:lst 
{: if(lst != null){
		RESULT = new Formal((Type)t,i.toString());
	}
:} | ; 
typelist::=  COMMA type ID typelist | ;